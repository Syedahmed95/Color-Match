{"version":3,"sources":["Header.js","App.js","serviceWorker.js","index.js"],"names":["head","tag","display","document","getElementById","props","parent","this","Container","fluid","style","background","dis","textAlign","id","Component","color","parentcall","child","setState","console","log","state","rand","RGB","change1","bind","generateRandomColors","Mouse","pickColor","First","square","querySelectorAll","i","length","that","addEventListener","save","j","textContent","Math","floor","random","num","arr","push","randomColor","event","Row","Col","className","Button","varient","size","onClick","Boolean","window","location","hostname","match","ReactDOM","render","App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e005baf1.chunk.js","sourcesContent":["import React,{Component} from \"react\";\r\nimport {Container} from \"react-bootstrap\";\r\n\r\n\r\nexport default class head extends Component{\r\n\r\n\r\n    componentDidMount(){\r\n        this.tag();\r\n    }\r\n    tag=()=>{\r\n        let display=document.getElementById(\"Tryagain\");\r\n        //console.log(display);\r\n        this.props.parent(display);\r\n    }\r\n   \r\n    render(){\r\n      //this.tag()\r\n        return(\r\n            <div>\r\n                <Container fluid style={{ background: this.props.dis()}}>\r\n                <h1 style={{textAlign: \"center\"}}> Color Matching\r\n                <br></br>\r\n                <span> {this.props.dis()}</span>\r\n                <br></br>\r\n                Game!\r\n                \r\n                \r\n                </h1>\r\n                <h2 style={{textAlign: \"center\"}} id=\"Tryagain\"></h2>\r\n                </Container>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n// const head = (props)=>{\r\n//     var dis=props;\r\n    \r\n//     return(\r\n//         <div>\r\n//             <Container fluid>\r\n//                <h1>{this.props}</h1>\r\n           \r\n//             </Container>\r\n//         </div>\r\n//     )\r\n// }\r\n//export default head;","import React, {Component} from \"react\";\r\nimport Head from \"./Header\";\r\nimport { Container, Button, Row, Col } from \"react-bootstrap\";\r\nclass color extends Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            RGB:\"\",\r\n            rand:\"\",\r\n            id:\"\",\r\n                       \r\n        }\r\n        \r\n        this.change1=this.change1.bind(this);\r\n        \r\n    }\r\n    componentDidMount(){\r\n        this.generateRandomColors(6);\r\n        this.Mouse();\r\n        this.pickColor();\r\n        \r\n    }\r\n    componentDidUpdate(){\r\n        this.First();\r\n        this.display();\r\n        \r\n    }\r\n\r\n    First(){\r\n        var square=document.querySelectorAll(\".square\")\r\n        for(var i=0; i<square.length; i++){\r\n            square[i].style.background=this.state.RGB[i];\r\n            \r\n        }\r\n    }\r\n\r\n    Mouse(){\r\n        \r\n       let that=this;\r\n        var square=document.querySelectorAll(\".square\");\r\n        \r\n        for(var i=0; i<square.length; i++){\r\n                    \r\n            square[i].addEventListener(\"click\", function(){\r\n                                 \r\n                var color=this.style.background;\r\n                \r\n                var save=that.state.id;\r\n                if(color===that.state.RGB[that.state.rand]){\r\n                   for(var j=0; j<square.length; j++){\r\n                       square[j].style.background=that.state.RGB[that.state.rand]\r\n                   }\r\n                    save.textContent=\"Yayy! You Won\"\r\n                }\r\n                    else{\r\n                        this.style.background=\"white\";\r\n                        save.textContent=\"Tryagain!\";\r\n                        \r\n                    }\r\n            })\r\n        }\r\n    }\r\n    parentcall=(child)=>{\r\n        \r\n        this.setState({id: child},function(){\r\n            console.log(this.state.id);\r\n        })\r\n       \r\n    }\r\n    \r\n    randomColor(){\r\n        //pick a \"red\" from 0 - 255\r\n        var r = Math.floor(Math.random() * 256);\r\n        //pick a \"green\" from  0 -255\r\n        var g = Math.floor(Math.random() * 256);\r\n        //pick a \"blue\" from  0 -255\r\n        var b = Math.floor(Math.random() * 256);\r\n       \r\n        return \"rgb(\" + r + \", \" + g + \", \" + b + \")\";\r\n        }\r\n\r\n    generateRandomColors(num){\r\n        //make an array\r\n        var arr = []\r\n        //repeat num times\r\n        for(var i = 0; i < num; i++){\r\n            //get random color and push into arr\r\n            arr.push(this.randomColor())\r\n            this.setState({RGB: arr}, ()=>{\r\n                //console.log(this.state.RGB);\r\n            })\r\n        }\r\n        //return that array\r\n        return arr;\r\n    }\r\n    pickColor(){\r\n        var random = Math.floor(Math.random() * this.state.RGB.length);\r\n        console.log(random);\r\n        this.setState({rand: random});\r\n        \r\n    }\r\n    display=()=>{\r\n        var dis=this.state.rand;\r\n        var color=this.state.RGB[dis];\r\n        console.log(color);\r\n        return color;\r\n    }\r\n    \r\n    change1(event){\r\n        this.generateRandomColors(6);\r\n        this.pickColor();\r\n        let save=this.state.id;\r\n        save.textContent=\"\";        \r\n    }\r\n    render(){\r\n        \r\n        \r\n        return(\r\n            <div>\r\n            <Head dis={this.display} parent={this.parentcall} />\r\n\r\n            <Container>\r\n               \r\n                <Row>\r\n                    <Col>\r\n                    <div className=\"square\"></div>\r\n                    </Col>\r\n                    <Col>\r\n                    <div className=\"square\"></div>\r\n                    </Col>\r\n                    <Col>\r\n                    <div className=\"square\"></div>\r\n                    </Col>\r\n                    </Row>\r\n                    <Row>\r\n                    <Col>\r\n                    <div className=\"square\"></div>\r\n                    </Col>\r\n                    <Col>\r\n                    <div className=\"square\"></div>\r\n                    </Col>\r\n                    <Col>\r\n                    <div className=\"square\"></div>\r\n                    </Col>\r\n                    </Row>\r\n                    <div className=\"text-center\">\r\n                    \r\n                    <Button className=\"but\" varient=\"danger\" size=\"lg\" onClick={this.change1}>Play Again!</Button>\r\n\r\n                    </div>\r\n            </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default color;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}